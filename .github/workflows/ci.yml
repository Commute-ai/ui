name: Node.js CI

permissions:
    pull-requests: write
    issues: write
    contents: write

on:
    push:
        branches: [master, main, develop]
    pull_request:
        branches: [master, main, develop]

env:
    NODE_VERSION: 22.x
    CI: 1

jobs:
    test:
        name: Test
        runs-on: ubuntu-latest

        steps:
            - name: üì• Checkout
              uses: actions/checkout@v4

            - name: üîß Set up Node.js ${{ env.NODE_VERSION }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: üì¶ Install dependencies
              run: npm ci

            - name: üîç Lint
              run: npm run lint

            - name: üß™ Test
              run: npm test

    # OTA update on every push
    ota-update:
        needs: test
        if: |
            github.event_name == 'push' && 
            !startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-latest
        steps:
            - name: üì• Checkout
              uses: actions/checkout@v4

            - name: üîß Set up Node.js ${{ env.NODE_VERSION }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: üî® Setup Expo and EAS
              uses: expo/expo-github-action@v8
              with:
                  eas-version: latest
                  token: ${{ secrets.EXPO_TOKEN }}

            - name: üì¶ Install dependencies
              run: npm ci

            - name: üéØ Determine update channel
              id: channel
              run: |
                  if [[ $GITHUB_REF == refs/heads/main ]] || [[ $GITHUB_REF == refs/heads/master ]]; then
                    echo "channel=production" >> $GITHUB_OUTPUT
                    echo "branch_name=main" >> $GITHUB_OUTPUT
                  else
                    echo "channel=staging" >> $GITHUB_OUTPUT
                    echo "branch_name=develop" >> $GITHUB_OUTPUT
                  fi

            - name: üöÄ Push OTA Update
              run: |
                  echo "üì± Pushing update to ${{ steps.channel.outputs.channel }} channel"
                  eas update \
                    --branch ${{ steps.channel.outputs.channel }} \
                    --message "${{ github.event.head_commit.message }}"
                  echo "‚úÖ Update published! All installed apps will receive it automatically."

            - name: üìù Add job summary
              if: always()
              run: |
                  if [[ "${{ job.status }}" == "success" ]]; then
                    echo "### ‚úÖ OTA Update Published" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "- **Channel:** \`${{ steps.channel.outputs.channel }}\`" >> $GITHUB_STEP_SUMMARY
                    echo "- **Commit:** ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
                    echo "- **Branch:** \`${GITHUB_REF#refs/heads/}\`" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "All devices with the app installed will receive this update automatically on next launch." >> $GITHUB_STEP_SUMMARY
                  else
                    echo "### ‚ùå OTA Update Failed" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "Check the job logs for details." >> $GITHUB_STEP_SUMMARY
                  fi

            - name: üí¨ Comment on commit
              uses: actions/github-script@v6
              if: always() && github.event_name == 'push'
              with:
                  script: |
                      const emoji = '${{ job.status }}' === 'success' ? '‚úÖ' : '‚ùå';
                      const status = '${{ job.status }}' === 'success' ? 'published' : 'failed';
                      const message = `${emoji} OTA Update ${status} to \`${{ steps.channel.outputs.channel }}\` channel\n\n` +
                                    `All devices with the app installed will receive this update automatically on next launch.`;

                      github.rest.repos.createCommitComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        commit_sha: context.sha,
                        body: message
                      });
